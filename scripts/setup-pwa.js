#!/usr/bin/env node

/**
 * Setup script for PWA features
 * This script will:
 * 1. Generate VAPID keys if they don't exist
 * 2. Run database migrations for push notifications
 * 3. Install required dependencies
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ Setting up PWA features for ChatBuddy...\n');

// Check if web-push is installed
try {
  require('web-push');
  console.log('‚úÖ web-push dependency found');
} catch (error) {
  console.log('üì¶ Installing web-push dependency...');
  try {
    execSync('npm install web-push @types/web-push', { stdio: 'inherit' });
    console.log('‚úÖ web-push installed successfully');
  } catch (installError) {
    console.error('‚ùå Failed to install web-push:', installError.message);
    process.exit(1);
  }
}

// Generate VAPID keys if not present in environment
const envPath = path.join(process.cwd(), '.env.local');
let envContent = '';

if (fs.existsSync(envPath)) {
  envContent = fs.readFileSync(envPath, 'utf8');
}

const hasVapidKeys = envContent.includes('NEXT_PUBLIC_VAPID_PUBLIC_KEY') && 
                   envContent.includes('VAPID_PRIVATE_KEY');

if (!hasVapidKeys) {
  console.log('üîë Generating VAPID keys...');
  try {
    const webpush = require('web-push');
    const vapidKeys = webpush.generateVAPIDKeys();
    
    // Add VAPID keys to .env.local
    const vapidConfig = `
# PWA Push Notifications (Generated by setup-pwa.js)
NEXT_PUBLIC_VAPID_PUBLIC_KEY=${vapidKeys.publicKey}
VAPID_PRIVATE_KEY=${vapidKeys.privateKey}
`;
    
    fs.appendFileSync(envPath, vapidConfig);
    console.log('‚úÖ VAPID keys generated and added to .env.local');
  } catch (error) {
    console.error('‚ùå Failed to generate VAPID keys:', error.message);
    process.exit(1);
  }
} else {
  console.log('‚úÖ VAPID keys already configured');
}

// Check if Supabase is configured
if (!envContent.includes('NEXT_PUBLIC_SUPABASE_URL') || !envContent.includes('NEXT_PUBLIC_SUPABASE_ANON_KEY')) {
  console.log('‚ö†Ô∏è  Supabase not configured. Please add your Supabase credentials to .env.local');
  console.log('   Required variables:');
  console.log('   - NEXT_PUBLIC_SUPABASE_URL');
  console.log('   - NEXT_PUBLIC_SUPABASE_ANON_KEY');
  console.log('   - SUPABASE_SERVICE_ROLE_KEY (for migrations)');
} else {
  console.log('‚úÖ Supabase configuration found');
  
  // Run database migration
  console.log('üóÑÔ∏è  Running database migration for PWA features...');
  try {
    // Check if migration file exists
    const migrationPath = path.join(process.cwd(), 'db/migrations/004_add_push_notifications.sql');
    if (fs.existsSync(migrationPath)) {
      console.log('üìÑ Migration file found: 004_add_push_notifications.sql');
      console.log('   Please run this migration in your Supabase dashboard or using the Supabase CLI:');
      console.log('   supabase db push');
      console.log('   Or copy the contents of db/migrations/004_add_push_notifications.sql to your Supabase SQL editor');
    } else {
      console.log('‚ö†Ô∏è  Migration file not found. Please ensure db/migrations/004_add_push_notifications.sql exists');
    }
  } catch (error) {
    console.error('‚ùå Error checking migration:', error.message);
  }
}

// Check if @radix-ui/react-scroll-area is installed (needed for notifications UI)
try {
  require('@radix-ui/react-scroll-area');
  console.log('‚úÖ @radix-ui/react-scroll-area dependency found');
} catch (error) {
  console.log('üì¶ Installing @radix-ui/react-scroll-area...');
  try {
    execSync('npm install @radix-ui/react-scroll-area', { stdio: 'inherit' });
    console.log('‚úÖ @radix-ui/react-scroll-area installed successfully');
  } catch (installError) {
    console.error('‚ùå Failed to install @radix-ui/react-scroll-area:', installError.message);
  }
}

console.log('\nüéâ PWA setup completed!');
console.log('\nNext steps:');
console.log('1. Run the database migration in Supabase');
console.log('2. Deploy your app to test push notifications');
console.log('3. Configure notification settings in the app');
console.log('\nNote: Push notifications require HTTPS in production');

console.log('\nüìö Documentation:');
console.log('- Service Worker: /public/sw.js');
console.log('- PWA Service: /src/lib/services/pwaService.ts');
console.log('- Notification Service: /src/lib/services/notificationService.ts');
console.log('- Settings Component: /src/components/settings/NotificationSettings.tsx');